% This is a template file for Sweave used in MAGeCK
% Author: Wei Li, Shirley Liu lab
% Do not modify lines beginning with "#__".
\documentclass{article}

\usepackage{amsmath}
\usepackage{amscd}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage{fullpage}
\usepackage[utf8]{inputenc}

\begin{document}
\setkeys{Gin}{width=0.9\textwidth}

\title{MAGeCK Comparison Report}
\author{Wei Li}

\maketitle


\tableofcontents

\section{Summary}

%Function definition
<<label=funcdef,include=FALSE,echo=FALSE>>=
genreporttable<-function(comparisons,ngenes,direction,fdr1,fdr5,fdr25){
  xtb=data.frame(Comparison=comparisons,Genes=ngenes,Selection=direction,FDR1=fdr1,FDR5=fdr5,FDR25=fdr25);
  colnames(xtb)=c("Comparison","Genes","Selection","FDR1%","FDR5%","FDR25%");
  return (xtb);
}
@

The statistics of comparisons is as indicated in the following table. 

<<label=tab1,echo=FALSE,results=tex>>=
library(xtable)
comparisons=c("PO1f_Cas9_ku70_1,PO1f_Cas9_ku70_2,PO1f_Cas9_ku70_3_vs_PO1f_1,PO1f_2,PO1f_3 neg.","PO1f_Cas9_ku70_1,PO1f_Cas9_ku70_2,PO1f_Cas9_ku70_3_vs_PO1f_1,PO1f_2,PO1f_3 pos.");
ngenes=c(7855,7855);
direction=c("negative","positive");
fdr1=c(0,110);
fdr5=c(0,124);
fdr25=c(0,169);

cptable=genreporttable(comparisons,ngenes,direction,fdr1,fdr5,fdr25);
print(xtable(cptable, caption = "Summary of comparisons", label = "tab:one",
    digits = c(0, 0, 0, 0, 0, 0, 0),
    table.placement = "tbp",
    caption.placement = "top"))
@

The meanings of the columns are as follows.

\begin{itemize}
\item \textbf{Comparison}: The label for comparisons;
\item \textbf{Genes}: The number of genes in the library;
\item \textbf{Selection}: The direction of selection, either positive selection or negative selection;
\item \textbf{FDR1\%}: The number of genes with FDR $<$ 1\%;
\item \textbf{FDR5\%}: The number of genes with FDR $<$ 5\%;
\item \textbf{FDR25\%}: The number of genes with FDR $<$ 25\%;
\end{itemize}

The following figures show:

\begin{itemize}
\item Individual sgRNA read counts of selected genes in selected samples; 
\item The distribution of RRA scores and p values of all genes; and
\item The RRA scores and p values of selected genes.
\end{itemize}


\newpage\section{Comparison results of PO1f Cas9 ku70 1,PO1f Cas9 ku70 2,PO1f Cas9 ku70 3 vs PO1f 1,PO1f 2,PO1f 3 neg.}

The following figure shows the distribution of RRA score in the comparison PO1f Cas9 ku70 1,PO1f Cas9 ku70 2,PO1f Cas9 ku70 3 vs PO1f 1,PO1f 2,PO1f 3 neg., and the RRA scores of 10 genes.

<<echo=FALSE>>=
gstable=read.table('Day4_CS_test.gene_summary.txt',header=T)
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=# 
#
# parameters
# Do not modify the variables beginning with "__"

# gstablename='__GENE_SUMMARY_FILE__'
startindex=3
# outputfile='__OUTPUT_FILE__'
targetgenelist=c("YALI1_F38538g","YALI1_D08205g","YALI1_D22768g","YALI1_D25337g","YALI1_F17087g","YALI1_A04715g","YALI1_E26900g","YALI1_F27904g","YALI1_A20221g","YALI1_D19108g")
# samplelabel=sub('.\w+.\w+$','',colnames(gstable)[startindex]);
samplelabel='PO1f_Cas9_ku70_1,PO1f_Cas9_ku70_2,PO1f_Cas9_ku70_3_vs_PO1f_1,PO1f_2,PO1f_3 neg.'


# You need to write some codes in front of this code:
# gstable=read.table(gstablename,header=T)
# pdf(file=outputfile,width=6,height=6)


# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")

######
# function definition

plotrankedvalues<-function(val, tglist, ...){
  
  plot(val,log='y',ylim=c(max(val),min(val)),type='l',lwd=2, ...)
  if(length(tglist)>0){
    for(i in 1:length(tglist)){
      targetgene=tglist[i];
      tx=which(names(val)==targetgene);ty=val[targetgene];
      points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
      # text(tx+50,ty,targetgene,col=colors[i])
    }
    legend('topright',tglist,pch=20,pt.cex = 2,cex=1,col=colors)
  }
}



plotrandvalues<-function(val,targetgenelist, ...){
  # choose the one with the best distance distribution
  
  mindiffvalue=0;
  randval=val;
  for(i in 1:20){
    randval0=sample(val)
    vindex=sort(which(names(randval0) %in% targetgenelist))
    if(max(vindex)>0.9*length(val)){
      # print('pass...')
      next;
    }
    mindiffind=min(diff(vindex));
    if (mindiffind > mindiffvalue){
      mindiffvalue=mindiffind;
      randval=randval0;
      # print(paste('Diff: ',mindiffvalue))
    }
  }
  plot(randval,log='y',ylim=c(max(randval),min(randval)),pch=20,col='grey', ...)
  
  if(length(targetgenelist)>0){
    for(i in 1:length(targetgenelist)){
      targetgene=targetgenelist[i];
      tx=which(names(randval)==targetgene);ty=randval[targetgene];
      points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
      text(tx+50,ty,targetgene,col=colors[i])
    }
  }
  
}




# set.seed(1235)



pvec=gstable[,startindex]
names(pvec)=gstable[,'id']
pvec=sort(pvec);

plotrankedvalues(pvec,targetgenelist,xlab='Genes',ylab='RRA score',main=paste('Distribution of RRA scores in \n',samplelabel))

# plotrandvalues(pvec,targetgenelist,xlab='Genes',ylab='RRA score',main=paste('Distribution of RRA scores in \n',samplelabel))


pvec=gstable[,startindex+1]
names(pvec)=gstable[,'id']
pvec=sort(pvec);

plotrankedvalues(pvec,targetgenelist,xlab='Genes',ylab='p value',main=paste('Distribution of p values in \n',samplelabel))

# plotrandvalues(pvec,targetgenelist,xlab='Genes',ylab='p value',main=paste('Distribution of p values in \n',samplelabel))



# you need to write after this code:
# dev.off()




@
%%
\clearpage
\newpage
The following figures show the distribution of sgRNA read counts (normalized) of selected genes in selected samples.
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(279.4914977003864,206.45397490025056,310.9880867450655,0.0,0.0,0.0),c(632.7761301071454,659.7710656954627,755.663125414077,66.16484866091575,31.7288322815574,70.2697455396589),c(470.4312337531256,657.5669307321148,546.125420625481,0.0,0.0,0.0),c(1142.8711737649462,849.3266725433795,582.1545282361898,0.0,0.0,0.0),c(263.8104565752822,200.57628166465622,242.72240916688042,0.0,0.0,0.0),c(280.413911884216,285.8028335807739,339.43211906930935,5.513737388409646,0.0,0.0))
targetgene="YALI1_F38538g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(4303.984581749184,3801.3981001206275,4149.036181696362,13.784343471024114,20.039262493615198,97.13758942246966),c(283.181154435705,221.88291964368565,211.43397361021223,540.3462640641453,1118.858822560182,1058.179697538393),c(133.7500566553004,166.04483390553958,75.37668565924606,2.756868694204823,0.0,0.0),c(149.4310977804046,111.67617147629211,132.73881751313775,0.0,16.699385411346,53.73568776562151),c(348.6725614876107,562.7891273081563,211.90804081561632,788.4644465425794,986.9336778105486,1304.1238069271992),c(11.068970205955896,13.224809780087224,15.64421777833409,132.3296973218315,240.4711499233824,250.0776238323155))
targetgene="YALI1_D08205g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(718.5606492033036,646.5462559153754,221.38938492369758,0.0,0.0,8.267028887018695),c(917.8021129105097,1014.6367947944698,1216.4564490668265,8.270606082614469,13.3595083290768,12.400543330528041),c(651.2244137837386,621.5660596640995,617.2355014360904,2.756868694204823,0.0,12.400543330528041),c(678.8968392986283,426.8674712350376,654.2127434576074,46.86676780148199,93.5165583035376,88.87056053545096),c(209.38801972933237,158.69771736104667,78.22108889167045,0.0,0.0,0.0),c(73.79313470637264,235.84244107822215,206.6933015561716,0.0,0.0,0.0))
targetgene="YALI1_D22768g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(828.3279370790328,988.1871752342953,928.6976553865601,0.0,0.0,10.333786108773369),c(1170.543599279836,1322.4809780087223,894.0907493920635,0.0,0.0,10.333786108773369),c(436.30190895142823,337.23264939222423,268.7961054641039,319.79676852775947,115.22575933828739,479.4876754470843),c(272.1121842297491,216.7399380625406,116.14646532399551,0.0,0.0,12.400543330528041),c(199.24146370720612,236.57715273267144,74.42855124843794,0.0,0.0,0.0),c(31.362082250208374,52.899239120348895,54.517728621467285,0.0,0.0,0.0))
targetgene="YALI1_D25337g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(515.6295287607788,404.8261216015589,325.6841701125915,5.513737388409646,15.0294468702114,24.801086661056083),c(540.5347117241796,374.702943769138,469.80060055542674,2.756868694204823,0.0,2.0667572217546737),c(158.6552396187012,356.33515240790575,268.3220382586998,2.756868694204823,3.3398770822692,66.13623109614956),c(166.03455308933843,265.23090725619375,250.30748445334544,2.756868694204823,0.0,0.0),c(368.9656735318632,474.6237287742415,535.2218749011874,99.24727299137362,36.7386479049612,55.80244498737619),c(90.39659001530649,199.84157001020694,216.64871286965695,0.0,0.0,2.0667572217546737))
targetgene="YALI1_F17087g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(3887.9757848420086,4204.754798413288,3328.4258491419287,181.9533338175183,263.8502894992668,165.3405777403739),c(632.7761301071454,105.0637665862485,133.2128847185418,8.270606082614469,1.6699385411346,0.0),c(539.6122975403499,404.09140994710964,420.49761119340417,253.6319198668437,419.15457382478456,369.9495426940866),c(252.74148636932628,178.53493203117753,237.50766990743574,2.756868694204823,0.0,0.0),c(107.92245950806999,96.98193838730631,99.5541131348533,0.0,5.009815623403799,0.0),c(86.70693327998785,101.39020831400205,109.98359165374269,0.0,0.0,0.0))
targetgene="YALI1_A04715g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(748.0779030858527,708.2620348891157,740.492974841147,11.027474776819291,0.0,10.333786108773369),c(704.7244364458587,408.49967987380535,586.8952002902304,8.270606082614469,3.3398770822692,0.0),c(409.55189762036815,628.1784645541431,679.8123725494269,0.0,1.6699385411346,0.0),c(179.8707658467833,99.18607335065418,59.73246788091198,0.0,0.0,0.0),c(54.422436845949825,88.90011018836411,125.15374222667272,0.0,3.3398770822692,2.0667572217546737),c(42.43105245616427,56.57279739259535,90.54683623217609,0.0,0.0,0.0))
targetgene="YALI1_E26900g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(400.32775578207156,232.1688828059757,448.94164351764795,0.0,0.0,0.0),c(474.1208904884442,371.7640971513408,720.5821522141763,0.0,5.009815623403799,4.133514443509347),c(179.8707658467833,189.55560684791686,182.51587408056437,0.0,0.0,0.0),c(640.1554435777826,713.4050164702608,709.6786064898828,2.756868694204823,0.0,4.133514443509347),c(231.52596014124416,299.7623550153104,259.31476135602264,0.0,0.0,2.0667572217546737),c(416.00879690717574,385.7236185858774,302.92894425319645,0.0,0.0,0.0))
targetgene="YALI1_F27904g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(351.4398040390997,171.18781548668463,366.928016982745,2.756868694204823,0.0,0.0),c(544.2243684594982,456.9906490674585,527.6367996147225,0.0,0.0,8.267028887018695),c(193.70697860422817,243.18955762271506,119.93900296722802,0.0,0.0,0.0),c(256.43114310464495,355.60044075345644,570.7769153064922,2.756868694204823,0.0,0.0),c(301.62943811229815,384.98890693142806,160.70878263197747,2.756868694204823,0.0,0.0),c(291.4828820901719,240.9854226593672,462.21552526896176,5.513737388409646,0.0,2.0667572217546737))
targetgene="YALI1_A20221g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(252.74148636932628,841.2448443444373,383.9944363772913,8.270606082614469,33.398770822692,0.0),c(900.2762434177462,665.6487589310569,854.7431713435262,2.756868694204823,0.0,6.200271665264021),c(464.89674865014763,312.2524531409483,278.27744957218516,0.0,16.699385411346,20.667572217546738),c(497.18124508418566,395.2748700937181,504.88157375532745,2.756868694204823,1.6699385411346,8.267028887018695),c(208.4656055455027,232.1688828059757,272.11457590193237,22.054949553638583,0.0,2.0667572217546737),c(303.47426647995746,271.8433121462374,152.6496401401084,0.0,0.0,90.93731775720565))
targetgene="YALI1_D19108g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@

\newpage\section{Comparison results of PO1f Cas9 ku70 1,PO1f Cas9 ku70 2,PO1f Cas9 ku70 3 vs PO1f 1,PO1f 2,PO1f 3 pos.}

The following figure shows the distribution of RRA score in the comparison PO1f Cas9 ku70 1,PO1f Cas9 ku70 2,PO1f Cas9 ku70 3 vs PO1f 1,PO1f 2,PO1f 3 pos., and the RRA scores of 10 genes.

<<echo=FALSE>>=
gstable=read.table('Day4_CS_test.gene_summary.txt',header=T)
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=# 
#
# parameters
# Do not modify the variables beginning with "__"

# gstablename='__GENE_SUMMARY_FILE__'
startindex=9
# outputfile='__OUTPUT_FILE__'
targetgenelist=c("Nontargeting","YALI1_C00167g","YALI1_C00209g","YALI1_C00177g","YALI1_C00164g","YALI1_C00258g","YALI1_C00141g","YALI1_C00331g","YALI1_A00014g","YALI1_C00353g")
# samplelabel=sub('.\w+.\w+$','',colnames(gstable)[startindex]);
samplelabel='PO1f_Cas9_ku70_1,PO1f_Cas9_ku70_2,PO1f_Cas9_ku70_3_vs_PO1f_1,PO1f_2,PO1f_3 pos.'


# You need to write some codes in front of this code:
# gstable=read.table(gstablename,header=T)
# pdf(file=outputfile,width=6,height=6)


# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")

######
# function definition

plotrankedvalues<-function(val, tglist, ...){
  
  plot(val,log='y',ylim=c(max(val),min(val)),type='l',lwd=2, ...)
  if(length(tglist)>0){
    for(i in 1:length(tglist)){
      targetgene=tglist[i];
      tx=which(names(val)==targetgene);ty=val[targetgene];
      points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
      # text(tx+50,ty,targetgene,col=colors[i])
    }
    legend('topright',tglist,pch=20,pt.cex = 2,cex=1,col=colors)
  }
}



plotrandvalues<-function(val,targetgenelist, ...){
  # choose the one with the best distance distribution
  
  mindiffvalue=0;
  randval=val;
  for(i in 1:20){
    randval0=sample(val)
    vindex=sort(which(names(randval0) %in% targetgenelist))
    if(max(vindex)>0.9*length(val)){
      # print('pass...')
      next;
    }
    mindiffind=min(diff(vindex));
    if (mindiffind > mindiffvalue){
      mindiffvalue=mindiffind;
      randval=randval0;
      # print(paste('Diff: ',mindiffvalue))
    }
  }
  plot(randval,log='y',ylim=c(max(randval),min(randval)),pch=20,col='grey', ...)
  
  if(length(targetgenelist)>0){
    for(i in 1:length(targetgenelist)){
      targetgene=targetgenelist[i];
      tx=which(names(randval)==targetgene);ty=randval[targetgene];
      points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
      text(tx+50,ty,targetgene,col=colors[i])
    }
  }
  
}




# set.seed(1235)



pvec=gstable[,startindex]
names(pvec)=gstable[,'id']
pvec=sort(pvec);

plotrankedvalues(pvec,targetgenelist,xlab='Genes',ylab='RRA score',main=paste('Distribution of RRA scores in \n',samplelabel))

# plotrandvalues(pvec,targetgenelist,xlab='Genes',ylab='RRA score',main=paste('Distribution of RRA scores in \n',samplelabel))


pvec=gstable[,startindex+1]
names(pvec)=gstable[,'id']
pvec=sort(pvec);

plotrankedvalues(pvec,targetgenelist,xlab='Genes',ylab='p value',main=paste('Distribution of p values in \n',samplelabel))

# plotrandvalues(pvec,targetgenelist,xlab='Genes',ylab='p value',main=paste('Distribution of p values in \n',samplelabel))



# you need to write after this code:
# dev.off()




@
%%
\clearpage
\newpage
The following figures show the distribution of sgRNA read counts (normalized) of selected genes in selected samples.
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(586.6554209156625,494.46094344437233,519.5776571228535,3683.176575457643,4148.127336178346,3509.353762539436),c(363.43118842888526,467.2766122297486,379.25376432325066,2803.7354620063047,2565.0255991827453,3639.5594675099805),c(843.0865640203074,487.8485385543287,227.07819138854634,2241.334248388521,3677.204667578389,2951.329312665674),c(318.232893421232,301.23177832420896,174.4567315886953,2412.26010742922,2661.882034568552,2649.5827582894917),c(87.62934746381751,384.98890693142806,130.84254869152147,1626.5525295808454,2705.300436638052,1886.9493434620172),c(160.5000679863605,174.86137375893108,155.0199761671287,1177.1829324254593,1554.7127817963126,1326.8581363665005),c(276.7242551488974,476.09315208314007,181.09367246435218,1783.6940451505204,2441.4501471387853,3837.968160798429),c(414.1639685395164,309.3136065231512,162.60505145359372,2321.2834405204608,2827.2059501408776,2750.853862155471),c(336.6811770978252,297.5582200519625,585.9470658794223,6324.256784505864,5931.621698110099,3445.284288665041),c(549.7588535624761,242.45484596826577,401.53492297724165,5047.826579089031,3652.1555894613703,2876.926052682506),c(726.8623768577705,481.2361336642851,715.8414801601356,5607.470924012609,5719.539503386005,5191.69414104774),c(475.96571885610354,587.7693235594322,563.6659072254313,6327.013653200069,4131.427950767,4550.999402303792),c(463.0519202824883,394.54015843926885,496.3483640580543,1935.3218233317857,3264.7298479181427,3005.0650004312956),c(211.2328480969917,296.08879674306394,56.41399744308354,799.4919213193987,996.9533090573561,1217.3200036135029),c(385.569128840797,528.992391203489,491.6076920040137,4736.300416643886,4468.75553607619,3040.199873201125),c(746.2330747181933,455.5212257585599,541.3847485714404,3581.172433772065,5168.459784811587,3410.1494158952114),c(1137.3366886619683,903.6953349726269,1377.165231698804,9475.357701981977,11011.574740241553,8461.304065863635),c(1070.0004532424032,860.3473473601189,983.2153840080274,2.756868694204823,5.009815623403799,8.267028887018695),c(1200.9832673462147,682.5471269833906,585.9470658794223,3768.6395049779926,6509.420433342671,4075.6452413002166),c(117.14660134636657,170.45310383223534,115.67239811859145,2097.97707628987,1227.404827733931,1361.9930091363299),c(265.65528494294153,150.61588916210448,259.31476135602264,1767.1528329852915,2231.0378909558253,2368.503776130856),c(212.15526228082135,284.3334102718753,310.0399523342574,1232.320306309556,2200.9789972154026,2736.386561603188),c(1071.8452816100626,1262.9693339983298,1169.0497285264203,10285.877098078194,11060.002957934455,10348.25340932565),c(468.58640538546626,131.51338614642296,97.18377710783298,1182.696669813869,2127.50170140548,1719.5420084998884),c(522.0864280475864,594.3817284494758,439.4602994095667,3156.614654864522,4864.53097032509,3505.2202480959268),c(452.9053642603621,440.8269926695741,639.9907272954855,4728.029810561271,3555.2991540755634,3964.040351325464),c(374.50015863484117,471.6848821564443,513.4147834526005,2969.147583658594,5736.238888797351,4340.190165684815),c(376.3449870025005,516.502293077851,447.04537469603173,5204.968094658706,3877.597292514541,3899.970877451069),c(689.0433953207545,792.7538751507841,782.2108889167044,15647.986708306575,6123.664630340578,4352.590709015343),c(516.5519429446085,479.0319987009372,548.0216894470972,2883.6846541382447,4558.932217297458,3629.225681401207),c(118.06901553019622,125.63569291082862,74.90261845384201,529.318789287326,1372.6894808126412,758.4999003839653),c(367.1208451642039,324.007839612137,394.4239148961807,2106.2476823724846,2989.189988630934,2517.3102960971923),c(663.2157981735241,666.3834705855062,438.5121649987586,4827.277083552644,7327.690318498625,4799.010268914352),c(443.6812224220655,564.2585506170549,288.2328608856705,4182.169809108716,4026.2218226755203,4503.463986203434),c(538.6898833565202,231.4341711515264,339.90618627471343,1450.1129331517368,2449.799839844458,2504.9097527666645),c(266.57769912677117,518.7064280411989,374.9871594746141,3247.5913217732814,3620.4267571798127,2719.8525038291505),c(541.4571259080093,271.1086004917881,228.9744602101626,2787.194249841076,2696.950743932379,2889.326596013034),c(535.0002266212016,455.5212257585599,411.964401496131,3625.282332879342,3595.3776790627935,2825.257122138639),c(428.00018129696133,503.2774832977638,410.5421998799188,3255.861927855896,3740.662332141504,2825.257122138639),c(622.6295740850192,558.3808573814606,507.25190978234775,5406.219509335658,4887.910109900974,5026.353563307366),c(691.8106378722435,515.7675814234017,550.3920254741175,4377.907486397258,3680.544544660658,2490.442452214382),c(1081.0694234483592,1066.06661060592,1210.7676426019777,11771.829324254593,9339.966260565818,6797.5645023511215),c(432.6122522161096,417.3162197271968,287.7587936802664,5356.595872839971,4261.683156975499,3912.3714207815974),c(210.31043391316203,227.76061287927996,216.64871286965695,1050.3669724920376,2331.2342034239014,1657.5392918472483),c(439.06915150291724,390.1318885125731,682.6567757818511,6514.480724405997,3346.556836433738,4530.331830086245),c(48.88795174297187,91.10424515171198,111.40579326995488,653.377880526543,514.3410706694568,1111.9153853040145),c(770.2158434977645,412.9079498005011,378.30562991244255,3484.682029474896,3478.4819811833718,2924.4614687828634),c(1792.2507591810256,1699.3880567412082,2108.1768624318697,18200.84711914024,18673.252766967096,14415.631621738848),c(248.12941545017802,366.6211155701958,240.3520731398601,2836.8178863367625,3605.3973103096014,2310.6345739217254),c(285.02598280336434,217.47464971698992,301.50674263698426,1844.3451564230265,2955.791217808242,2163.8948111771433),c(350.51738985527004,429.80631785283475,594.4802755766954,3542.5762720531975,4787.713797432898,3416.3496875604756),c(584.8105925480032,822.1423413287557,510.5703802201762,4380.664355091463,5338.793516007316,5233.029285482834),c(214.92250483231032,191.75974181126475,218.07091448586914,1745.097883431653,1835.2624567069254,1998.5542334367694),c(390.18119975994534,363.68226895239866,259.31476135602264,1995.9729346042918,2175.929919098384,2217.630498942765),c(161.42248217019016,121.96213463858217,218.07091448586914,1979.4317224390627,2000.5863722792508,1516.9998007679305),c(359.7415316935666,441.5617043240234,441.35656823118296,3956.106576183921,4209.915062200326,4377.391795676399),c(270.2673558620898,250.53667416720796,171.13826115086687,2219.2792988348824,2282.805985730998,1535.6006157637225),c(173.4138665599757,363.68226895239866,197.6860246534944,1532.8189939778815,1967.1876014565587,1884.8825862402623),c(534.077812437372,281.3945636540781,486.86701994997304,2751.354956816413,3839.1887060684453,3406.015901451702),c(743.4658321667043,602.4635566484179,464.58586129598206,4118.761829142005,4109.71874973225,4718.40673726592),c(762.8365300271272,528.2576795490396,628.613114365788,4816.249608775825,5293.705175396682,5199.961169934759),c(143.89661267742665,207.92339820914913,311.4621539504696,1678.933034770737,1202.355749616912,1827.0133840311316),c(1985.0353236014241,1658.244204092048,1910.9649049837792,13913.91629965174,15799.28853767445,14213.08941400689),c(461.207091914829,505.48161826111163,588.7914691118467,3928.5378892418726,3052.647653194049,3325.41236980327),c(95.00866093445478,42.613275958058836,211.90804081561632,559.6443449235791,863.3582257665881,553.8909354302525),c(103.3103885889217,102.12491996845134,283.0181216262258,1047.6101037978326,1882.020735858694,985.8431947769793),c(333.9139345463362,958.0639974018744,697.3528591493772,13078.585085307679,6890.166420721359,4956.083817767708),c(279.4914977003864,326.2119745754849,192.94535259945377,1199.237881979098,2246.067337826037,2287.9002444824237),c(564.5174805037507,531.1965261668369,716.7896145709437,4981.661730428114,6132.014323046251,4189.316888496724),c(458.43984936334004,420.9897779994433,367.87615139355313,2461.883743924907,3478.4819811833718,2976.13039932673),c(723.1727201224519,400.4178516748632,403.43119179885787,2743.0843507337986,3248.030462506797,4088.0457846307445),c(608.7933613275743,542.9519126380254,751.8705877708444,4433.044860281355,5362.1726555832,4734.940795039957),c(260.1207998399636,109.47203651294424,162.60505145359372,347.36545546980767,1957.167970209751,2465.6413655533256),c(137.43971339061903,165.3101222510903,271.6405086965283,755.3820222121215,2175.929919098384,1519.0665579896852),c(166.03455308933843,125.63569291082862,59.73246788091198,959.3903055832783,1442.8268995402943,1008.5775242162807),c(454.7501926280214,443.031127632922,215.22651125344476,1491.465963564809,2904.023123033069,1955.1523317799213),c(386.4915430246267,240.9854226593672,221.86345212910163,2304.742228355232,2760.408408495494,2159.761296733634),c(151.27592614806392,177.06550872227893,52.14739259444697,399.74596065969934,1566.4023515842548,847.3704609194162),c(351.4398040390997,425.39804792613904,163.55318586440185,6583.402441761117,2793.8071793181857,3432.883745334513),c(76.56037725786162,49.22568084810244,229.44852741556664,573.4286883946031,667.97541645384,1215.2532463917482),c(1172.3884276474953,1182.8857636633572,1037.2590454240906,7992.162344499781,11024.93424857063,8293.896730901506),c(948.2417809768884,538.5436427113298,667.4866252089212,3559.1174842184264,5667.771408610833,5317.766331574775),c(951.0090235283774,941.1656293495407,1031.5702389592418,6892.171735512057,9154.603082499876,9213.603694582336),c(118.06901553019622,203.5151282824534,216.64871286965695,1436.3285896807126,1366.0097266481027,927.9739925678485),c(154.0431686995529,246.8631158949615,231.81886344258697,1791.9646512331349,1967.1876014565587,1853.8812279139422),c(309.9311657667651,232.1688828059757,281.59592001001363,2450.8562691480874,1810.2133785899064,3606.4913519619054),c(459.3622635471697,296.82350839751325,222.3375193345057,2789.951118535281,2603.4341856288415,1762.9439101567366),c(116.22418716253691,102.12491996845134,146.48676646985558,1568.6582870025443,985.2637392694139,766.766929270984),c(191.86215023656888,133.71752110977081,457.4748532149211,1406.0030340444596,1669.9385411346,2304.4343022564613),c(258.27597147230426,119.7579996752343,134.635086334754,1160.6417202602304,1888.7004900232325,1322.7246219229912),c(238.90527361188143,368.8252505335437,443.25283705279924,3512.250716416944,3152.843965662125,2630.9819432936997),c(63.6465786842464,31.592601141319477,23.703360270203166,184.71020251172314,255.5005967935938,231.47680883652345),c(164.1897247216791,72.00174213603044,160.23471542657342,2933.3082906339314,1551.3729047140434,1820.8131123658675),c(212.15526228082135,303.43591328755684,203.37483111834317,1587.956367861978,2107.4624389118653,2465.6413655533256),c(596.8019769377887,905.8994699359748,428.55675368527324,4901.712538296175,6910.205683214975,5456.239065432339),c(323.76737852420996,182.94320195787327,145.53863205904744,1888.4550555303038,1970.5274785388278,2130.8266956290686),c(518.3967713122678,236.57715273267144,149.33116970227994,2379.177683098762,1496.2649328566015,1748.4766096044539),c(371.73291608335217,213.80109144474346,372.6168234475938,1896.7256616129182,2062.374098301231,1841.4806845834144),c(549.7588535624761,106.53318989514707,107.61325562672238,501.75010234527775,910.116504918357,1064.3799692036569),c(370.81050189952254,284.3334102718753,281.12185280460955,2988.445664518028,2605.104124169976,1607.9371185251362),c(41.50863827233461,116.08444140298785,153.12370734551246,1177.1829324254593,1673.278418216869,1736.0760662739258),c(142.05178430976733,110.20674816739353,56.41399744308354,548.6168701467598,916.7962590828954,1227.653789722276),c(449.21570752504346,625.239617936346,380.2018987340588,6533.7788052654305,4024.551884134386,5133.824938838609),c(111.61211624338861,115.34972974853856,73.95448404303389,650.6210118323382,945.1852142821836,553.8909354302525),c(333.9139345463362,329.150821193282,368.3502185989572,2836.8178863367625,3401.66480829118,3406.015901451702),c(124.52591481700384,99.18607335065418,293.9216673505193,303.2555563625305,1259.1336600154884,1041.6456397643556),c(446.44846497355445,346.0491892456157,164.97538748061405,1987.7023285216774,2925.7323240678193,2556.5786833105312),c(303.47426647995746,260.82263732949804,357.9207400800678,4325.526981207367,3303.1384343642385,2199.029683946973),c(513.7847003931195,260.0879256750487,117.09459973480364,2106.2476823724846,2767.088162660032,2430.5064927834965),c(170.64662400848673,98.45136169620488,160.23471542657342,691.9740422454105,1279.1729225091035,1209.052974726484),c(224.14664667060688,116.08444140298785,232.29293064799103,705.7583857164346,829.9594549438962,1012.7110386597901),c(165.11213890550877,462.1336306486035,351.2837992044109,2426.044450900244,3916.005878960637,2637.1822149589634),c(155.8879970672122,55.838085738146056,73.00634963222575,308.76929375094016,888.4073038836071,1599.6700896381174),c(331.14669199484723,224.0870546070335,181.09367246435218,1692.7173782417613,2134.181455570019,2471.8416372185898),c(128.21557155232247,267.43504221954163,361.23921051789625,2687.9469768497024,1624.8502005239657,1736.0760662739258),c(95.93107511828444,9.551251507840773,76.79888727545826,1102.7474776819292,430.8441436127268,958.9753508941686),c(352.36221822292936,361.4781339890508,338.48398465850124,2246.8479857769307,3306.478311446508,2664.0500588417744),c(159.57765380253085,58.042220701493925,127.9981454590971,2142.0869753971474,686.3447404063206,632.4277098569302),c(566.36230887141,645.8115442609261,563.6659072254313,2310.2559657436414,6317.377501112192,4592.334546738885),c(135.59488502295972,249.0672508583094,222.3375193345057,1596.2269739445924,2732.0194532962055,2372.6372905743656),c(125.4483290008335,53.63395077479819,44.56231730798196,435.585253684362,935.165583035376,646.8950104092129),c(129.13798573615213,298.2929317064118,164.97538748061405,1149.6142454834112,1426.1275141289484,1095.381327529977),c(530.3881557020534,498.86921337106804,409.11999826370663,3509.4938477227392,3430.053763490468,3736.69705693245),c(860.6124335130709,767.038967245059,617.2355014360904,3366.1366756240886,5579.264665930698,4395.9926106721905),c(98.6983176697734,55.838085738146056,49.77705656742665,435.585253684362,781.5312372509927,198.40869328844866),c(574.6640365258769,609.8106731929108,590.6877379334629,5436.5450649719105,3582.018170733717,4036.3768540868778),c(204.77594881018408,188.82089519346758,284.440323242438,1841.5882877288216,1708.3471275806958,2292.033758925933),c(339.44841964931413,252.00609747610653,99.5541131348533,2828.547280254148,2773.7679168245704,2335.435660582781),c(474.1208904884442,138.86050269091584,316.6768932099143,1838.8314190346168,1948.8182775040782,1930.3512451188653),c(394.7932706790936,196.16801173796048,287.7587936802664,1670.6624286881226,1738.4060213211185,1498.3989857721385),c(904.8883143368945,586.2999002505336,538.0662781336118,9693.150328824157,6659.714902044784,4534.4653445297545),c(498.10365926801535,663.444623967709,629.087181571192,4923.767487849814,6070.226597024271,6524.752549079505),c(288.715639538683,234.37301776932358,400.11272136102946,2550.1035421394613,2641.8427720749373,2277.56645837365),c(383.72430047313776,334.29380277442704,531.429337257955,2194.467480587039,3253.0402781302005,2513.176781653683),c(255.50872892081526,45.55212257585599,58.78433347010385,1000.7433359963507,218.7619488886326,489.82146155585764),c(94.08624675062512,63.185202282638954,98.1319115186411,923.5510125586156,527.7005789985336,589.025808200082),c(51.65519429446085,84.49184026166837,33.18470437828444,2657.621421213449,824.9496393204923,489.82146155585764),c(152.19834033189358,250.53667416720796,321.41756526395494,1146.8573767892062,1693.3176807104844,1452.9303268935355),c(215.84491901613998,420.9897779994433,215.22651125344476,1885.6981868360988,3094.396116722414,2527.644082205966),c(310.85357995059474,163.10598728774244,122.30933899424834,2315.7697031320513,2428.0906388097083,2159.761296733634),c(282.25874025187534,353.3963057901086,224.70785536152601,2698.9744516265214,2651.8624033217448,3277.8769537029125),c(267.5001133106008,294.61937343416537,125.62780943207679,1174.4260637312545,1721.7066359097726,2139.093724516087),c(540.5347117241796,264.4961956017445,467.43026452840644,3186.9402105007753,2050.6845285132886,1992.3539617715055),c(251.81907218549662,316.6607230676441,122.7834061996524,2381.934551792967,2563.355660641611,2327.1686316957625),c(462.1295060986587,313.72187644984695,291.0772641180949,2423.287582206039,2423.0808231863043,2343.7026894698),c(611.5606038790633,423.9286246172405,338.95805186390527,3368.8935443182936,3947.7347112421944,4166.582559057422),c(1197.2936106108962,1227.703174584764,856.1653729597384,9296.161236858663,8566.784716020498,7272.918663354697),c(425.2329387454723,354.8657290990072,316.20282600451026,3203.481422666004,2190.959365968595,2356.103232800328),c(316.3880650535727,643.6074092975782,395.3720493069888,2591.4565725525335,3658.8353436259085,3091.868803744992),c(143.89661267742665,391.60131182147165,310.5140195396615,1496.9797009532188,968.564353858068,1407.4616680149327),c(784.974470439039,991.8607335065418,715.3674129547315,6150.57405677096,9513.639868843817,6677.692583489351),c(95.00866093445478,42.613275958058836,74.42855124843794,606.511112725061,796.5606841212042,717.1647559488717),c(106.07763114041067,94.04309176950915,199.58229347511067,2177.92626842181,1987.226863950174,1651.3390201819843),c(309.0087515829354,355.60044075345644,292.4994657343071,3878.914252746186,3196.262367731624,2387.1045911266483),c(214.00009064848066,207.92339820914913,194.36755421566596,2111.761419760894,1339.2907099899492,1175.9848591784094),c(342.21566220080314,448.90882086851633,738.5967060195306,4320.013243818958,2665.2219116508213,2077.091007863447),c(269.3449416782601,296.82350839751325,264.5295006154673,3821.0200101678843,2408.051376316093,2721.9192610509053),c(108.84487369189965,55.838085738146056,21.807091448586913,532.0756579815308,377.40611029641957,316.2138549284651),c(184.4828367659316,107.26790154959637,110.93172606455082,945.6059621122542,1280.842861050238,1465.3308702240636),c(192.7845644203985,171.9225271411339,41.24384687015351,441.09899107277164,1394.398681847391,1175.9848591784094),c(269.3449416782601,163.84069894219172,275.4330463397608,2288.201016190003,3827.499136280503,3552.755664196284),c(224.14664667060688,288.0069685441218,262.6332317938511,1428.0579835980982,1629.8600161473696,1438.463026341253),c(546.9916110109872,512.0940231511553,741.9151764573592,3702.474656317077,4869.540785948493,4856.879471123483),c(642.000271945442,794.958010114132,1043.8959862997474,7702.691131608275,7771.893970440428,6592.955537397409),c(315.46565086974306,195.4333000835112,313.3584227720859,2605.2409160235575,1900.3900598111748,1986.1536901062414),c(75.63796307403196,198.37214670130837,265.9517022316795,2373.6639457103524,1664.928725511196,1279.322720266143),c(193.70697860422817,178.53493203117753,235.1373338804154,3156.614654864522,1678.288233840273,1680.2736212865498),c(148.50868359657494,377.64179038693516,124.2056078158646,1199.237881979098,1726.7164515331763,2298.234030591197),c(215.84491901613998,110.20674816739353,91.96903784838828,1306.755761053086,1165.6171017119507,1107.781870860505),c(102.38797440509204,209.3928215180477,23.703360270203166,573.4286883946031,993.613431975087,851.5039753629255),c(157.73282543487153,83.02241695276979,159.76064822116933,1508.0071757300382,786.5410528743965,973.4426514464514),c(110.68970205955895,82.2877052983205,197.21195744809035,1080.6925281282906,821.6097622382232,899.0393914632831),c(298.8621955608092,246.12840424051222,360.29107610708814,3451.599605144438,2706.9703751791867,2628.915186071945),c(52.57760847829051,11.755386471188643,27.495897913435673,631.3229309729044,637.9165227134172,659.2955537397409),c(593.1123202024701,471.6848821564443,548.4957566525013,4372.393749008849,6237.22045113773,6103.134075841552),c(73.79313470637264,193.22916512016332,161.18284983738153,576.185557088808,1067.0907277850094,1324.7913791447459),c(355.1294607744183,187.351471884569,304.35114586940864,3887.1848588288003,2279.466108648729,1686.4738929518137),c(58.112093581268454,25.714907905725156,82.01362653490295,157.1415155696749,374.0662332141504,636.5612243004394),c(493.491588348867,330.6202445021806,464.111794090578,2853.3590985019914,3490.171550971314,3701.5621841626207),c(364.3536026127149,382.7847719680802,117.09459973480364,2075.922126736232,2479.858733584881,2418.105949452968),c(512.8622862092899,284.3334102718753,385.4166379935035,6933.524765925129,4420.327318383286,3997.108466873539),c(679.819253482458,163.84069894219172,109.50952444833862,3327.5405139052214,2585.0648616763606,2238.298071160312),c(103.3103885889217,22.776061287927995,0.0,140.60030340444595,153.63434578438319,314.1470977067104),c(132.82764247147077,144.73819592651017,181.56773966975626,1568.6582870025443,1040.3717111268559,1496.3322285503837),c(362.5087742450556,438.6228577062262,219.96718330748539,2111.761419760894,3314.8280041521807,2540.044625536494),c(49.81036592680153,32.32731279576877,97.18377710783298,780.1938404599649,778.1913601687236,653.0952820744769),c(456.5950209956807,315.1912997587455,726.7450258844291,3131.8028366166786,4552.25246313292,3823.500860246146),c(478.7329614075925,413.64266145495037,549.4438910633094,6575.131835678502,4478.775167322997,3885.5035768987864),c(276.7242551488974,92.57366846061056,236.5595354966276,1841.5882877288216,1988.8968024913086,2132.8934528508235),c(154.96558288338255,171.18781548668463,106.19105401051019,854.6292952034951,1364.3397881069682,814.3023453713414),c(107.00004532424033,99.92078500510347,45.51045171879008,410.7734354365186,355.69690926166976,524.9563343256871),c(247.20700126634836,160.16714066994527,81.5395593294989,1756.125358208472,2526.6170127366495,1703.007950725851),c(327.4570352595286,411.4385264916025,336.1136486314809,3231.0501096080525,4082.9997330740966,3186.939635945707),c(280.413911884216,280.65985199962887,223.28565374531382,1204.7516193675076,2144.2010868168263,2312.70133114348),c(661.3709698058648,407.7649682193561,207.64143596697974,1665.148691299713,3471.8022270188335,2699.184931611604),c(94.08624675062512,314.4565881042962,93.39123946460047,1822.290206869388,933.4956444942413,1103.6483564169957),c(344.9829047522921,320.33428133989054,260.26289576683075,1703.7448530185804,3156.183842744394,2236.231313938557),c(405.8622408850495,354.8657290990072,606.331955711797,3437.815261673414,4133.097889308135,2963.729855996202),c(313.62082250208374,319.5995696854412,420.97167839880825,1916.0237424723518,3131.134764627375,3042.2666304228796),c(558.0605812169431,551.0337408369677,400.58678856643354,2798.2217246178952,3690.564175907466,2566.9124694193047),c(493.491588348867,800.8357033497264,375.9352938854222,8620.72840677848,4654.11871414213,4505.530743425189),c(107.00004532424033,89.63482184281341,130.36848148611742,1494.222832259014,686.3447404063206,1070.580240868921),c(273.95701259740844,223.35234295258422,227.07819138854634,1689.9605095475563,1708.3471275806958,1645.1387485167202),c(323.76737852420996,276.9862937273824,536.1700093119956,526.5619205931212,1045.3815267502596,1816.6795979223582),c(368.9656735318632,407.0302565649068,158.81251381036122,1637.5800043576648,2743.7090230841477,2494.575966657891),c(342.21566220080314,166.04483390553958,74.42855124843794,937.3353560296398,1065.4207892438747,1244.1878474963135),c(117.14660134636657,113.88030643963998,126.57594384288491,1469.4110140111707,546.0699029510142,886.638848132755),c(174.33628074380536,310.78302983204975,332.3211109882484,7837.777697624311,2620.1335710401872,2678.517359394057),c(319.1553076050617,488.583250208778,329.476707755824,2359.8796022393285,2491.5483033728233,2385.0378339048934),c(235.2156168765628,243.18955762271506,529.5330684363388,1811.2627320925685,2763.748285577763,1752.6101240479634),c(512.8622862092899,344.5797659367171,265.0035678208714,3583.9293024662697,3762.3715331762537,2571.045983862814),c(241.6725161633704,276.2515820729331,445.14910587441545,1764.3959642910866,2566.69553772388,2568.9792266410595),c(238.90527361188143,182.94320195787327,157.8643793995531,1014.5276794673748,1462.8661620339096,1506.666014659157),c(357.8967033259073,388.6624652036745,353.1800680260272,1665.148691299713,3787.4206112932725,2994.731214322522),c(456.5950209956807,342.37563097336925,157.39031219414903,1929.808085943376,2351.2734659175167,2161.828053955389),c(262.88804239145253,281.3945636540781,152.6496401401084,2219.2792988348824,2227.698013873556,1860.0814995792064),c(120.8362580816852,165.3101222510903,126.10187663748084,1213.022225450122,1892.0403671055017,777.1007153797573),c(198.31904952337646,274.78215876403453,192.94535259945377,2652.1076838250397,2202.6489357565374,3385.3483292341557),c(629.0864733718267,207.92339820914913,40.29571245934538,832.5743456498565,826.619577861627,1182.1851308436733),c(205.69836299401373,341.64091931891994,218.07091448586914,2969.147583658594,2366.302912787728,1638.9384768514562),c(267.5001133106008,199.84157001020694,182.51587408056437,1794.7215199273396,1786.834239014022,2083.291279528711),c(191.86215023656888,200.57628166465622,177.77520202652374,714.0289917990491,1239.0943975218731,1345.4589513622925),c(149.4310977804046,80.81828198942192,174.4567315886953,2817.519805477329,2038.9949587253466,1223.5202752787668),c(197.3966353395468,128.5745395286258,137.47948956717838,1742.341014737448,1284.1827381325074,1357.8594946928206),c(118.99142971402588,115.34972974853856,265.9517022316795,821.5468708730372,1786.834239014022,1674.0733496212856),c(127.2931573684928,87.43068687946554,158.33844660495714,895.9823256165674,1093.809744443163,1403.3281535714234),c(195.5518069718875,60.2463556648418,69.68787919439731,780.1938404599649,607.8576289729943,905.239663128547),c(111.61211624338861,70.53231882713186,196.7378902426863,8.270606082614469,23.3791395758844,39.2683872133388),c(119.91384389785554,72.73645379047973,231.3447962371829,1306.755761053086,1118.858822560182,888.7056053545097),c(108.84487369189965,187.351471884569,85.33209697273139,1149.6142454834112,1489.5851786920632,1696.8076790605871),c(35.051738985527,141.799349308713,156.4421777833409,206.76515206536172,178.6834239014022,382.35008602461465),c(718.5606492033036,839.0407093810894,409.5940654691107,6123.005369828911,5021.505193191742,4096.312813517763),c(197.3966353395468,191.02503015681546,250.30748445334544,1215.7790941443268,1616.5005078182928,1289.6565063749165),c(100.54314603743272,7.347116544492902,7.585075286465013,201.25141467695207,370.7263561318812,45.468658878602824),c(364.3536026127149,331.3549561566299,126.10187663748084,2803.7354620063047,1330.941017284276,1122.2491714127877),c(242.59493034720006,304.9053365964554,159.76064822116933,5450.329408442934,1845.282087953733,2451.174065001043),c(135.59488502295972,308.57889486870187,273.0627103127405,2373.6639457103524,2344.5937117529784,2044.0228923153722),c(189.0949076850799,150.61588916210448,82.01362653490295,871.170507368724,1509.6244411856783,1485.9984424416105),c(297.9397813769795,155.02415908880025,443.72690425820326,2315.7697031320513,2005.5961879026545,2186.6291406164446),c(154.96558288338255,459.9294956852557,281.59592001001363,3266.8894026327152,2611.783878334514,3009.198514874805),c(94.08624675062512,89.63482184281341,0.0,198.49454598274724,933.4956444942413,305.8800688196917),c(224.14664667060688,265.96561891064306,225.65598977233415,1207.5084880617123,2012.275942067193,2085.3580367504655),c(117.14660134636657,97.7166500417556,243.67054357768856,1703.7448530185804,1396.0686203885255,1527.3335868767037),c(95.00866093445478,182.94320195787327,233.24106505879917,1028.312022938399,1098.8195600665667,1529.4003440984586),c(413.2415543556868,365.88640391574654,309.5658851288534,962.1471742774831,2666.891850191956,3093.9355609667464),c(154.96558288338255,114.61501809408927,235.1373338804154,672.6759613859767,748.1324664283007,954.8418364506592),c(158.6552396187012,276.9862937273824,289.1809952964786,1499.7365696474237,1619.840384900562,1864.2150140227156),c(96.85348930211408,21.306637979029418,77.74702168626638,515.5344458163019,679.6649862417822,756.4331431622106),c(338.5260054654845,351.19217082676073,370.7205546259775,2610.7546534119674,3284.769110411758,2554.511926088777),c(150.35351196423426,257.1490790572516,175.8789332049075,1047.6101037978326,1372.6894808126412,1558.334945203024),c(292.4052962740016,55.103374083696764,48.828922156618525,1064.1513159630615,709.723879982205,746.0993570534372),c(164.1897247216791,360.7434223346015,271.1664414911242,1736.8272773490385,1491.2551172331978,1872.4820429097344),c(398.48292741441225,595.8511517583744,105.71698680510612,2428.801319594449,1830.2526410835214,1820.8131123658675),c(319.1553076050617,451.1129558318642,402.48305738804976,1290.214548887857,2932.4120782323575,2273.432943930141),c(61.80175031658709,144.73819592651017,100.02818034025736,1284.7008114994474,1641.5495859353118,1488.065199663365),c(184.4828367659316,350.4574591723114,389.209175636736,2351.608996156714,3122.7850719217017,2469.774879996835),c(193.70697860422817,168.24896886888746,195.78975583187815,2528.0485925858225,2037.325020184212,1597.6033324163627),c(14.758626941274528,11.755386471188643,0.0,416.28717282492823,355.69690926166976,186.00814995792064),c(166.9569672731681,357.8045757168043,147.4349008806637,868.4136386745192,1401.0784360119294,1975.8199039974681),c(92.2414183829658,162.37127563329312,145.53863205904744,857.3861638976999,860.018348684319,818.4358598148508),c(553.4485102977948,674.4652987844485,306.2474146910249,7154.074261461516,7057.16027483482,4947.816788880688),c(181.71559421444263,158.69771736104667,98.60597872404517,937.3353560296398,1280.842861050238,1579.0025174205707),c(141.12937012593767,268.9044655284402,153.5977745509165,3385.4347564835225,1494.594994315467,2097.758580080994),c(427.07776711313164,476.09315208314007,246.51494681011292,3476.4114233922814,3321.5077583167194,3228.2747803808),c(475.96571885610354,550.2990291825183,299.61047381536804,2936.0651593281364,3486.831673889045,3505.2202480959268),c(166.03455308933843,151.3506008165538,132.26475030773366,1505.2503070358332,2780.4476709891087,1581.0692746423254),c(155.8879970672122,279.92514034517956,265.4776350262755,1414.273640127074,1708.3471275806958,1707.1414651693606),c(527.6209131505644,683.2818386378399,316.20282600451026,3239.320715690667,4772.684350562687,3540.355120865756),c(127.2931573684928,144.73819592651017,285.3884576532461,2566.64475430469,1633.1998932296387,1173.9181019566547),c(133.7500566553004,38.93971768581238,137.95355677258243,1213.022225450122,1155.5974704651433,1147.050258073844),c(15.681041125104187,12.490098125637934,23.2292930647991,90.97666690875916,141.944775996441,287.27925382389964),c(81.1724481770099,43.34798761250812,32.71063717288037,515.5344458163019,1078.7802975729517,574.5585076477993),c(127.2931573684928,215.27051475364203,245.09274519390075,5486.168701467597,1225.7348891927963,1279.322720266143),c(140.206955942108,188.82089519346758,182.04180687516032,1160.6417202602304,1701.6673734161573,1537.6673729854772),c(306.24150903144647,216.7399380625406,204.79703273455536,6572.374966984297,2543.3163981479956,3232.4082948243095),c(183.56042258210195,22.776061287927995,62.57687111333636,598.2405066424466,415.81469674251537,355.48224214180385),c(79.3276198093506,96.24722673285702,114.72426370778332,394.2322232712897,1078.7802975729517,971.3758942246966),c(149.4310977804046,194.6985884290619,100.97631475106549,846.3586891208806,1347.6404026956222,2149.4275106248606),c(108.84487369189965,157.9630057065974,201.47856229672692,3426.7877868965948,1083.7901131963554,1136.7164719650705),c(116.22418716253691,241.7201343138165,108.08732283212643,567.9149510061935,1374.3594193537758,956.9085936724139),c(253.66390055315594,248.33253920386008,271.6405086965283,1461.1404079285562,1255.793782933219,1347.5257085840472),c(333.9139345463362,249.0672508583094,129.89441428071336,2450.8562691480874,1968.8575399976933,1793.9452684830567),c(21.215526228082133,55.103374083696764,166.39758909682624,294.98495027991606,504.3214394226492,467.08713211655623),c(263.8104565752822,285.0681219263246,208.1155031723838,1778.1803077621107,1648.22934009985,1293.7900208184258),c(442.7588082382358,535.6047960935325,514.8369850688127,5516.494257103851,6172.0928480334815,4197.583917383742),c(124.52591481700384,91.10424515171198,49.77705656742665,1177.1829324254593,2678.5814199798983,1252.4548763833322),c(117.14660134636657,110.20674816739353,246.04087960470886,2902.9827349976786,1255.793782933219,1562.4684596465333),c(259.1983856561339,391.60131182147165,185.36027731298876,16461.262973096997,5099.992304625068,2628.915186071945),c(79.3276198093506,83.02241695276979,54.991795826871346,427.31464760174754,567.779103985764,400.9509010204067),c(136.51729920678937,177.80022037672822,206.21923435076755,1359.1362662429776,1581.4317984544662,1134.6497147433158),c(248.12941545017802,432.01045281618264,599.6950148361401,3004.986876683257,2872.294290751512,2943.0622837786555),c(577.431279077366,489.31796186322725,201.47856229672692,4146.330516084054,4298.4218048804605,3631.2924386229615),c(95.00866093445478,213.06637979029415,109.98359165374269,3018.771220154281,641.2563997956863,1124.3159286345424),c(179.8707658467833,121.96213463858217,201.47856229672692,578.9424257830128,1177.306671499893,1200.7859458394655),c(380.0346437378191,774.3860837895519,834.3582815111515,5003.716679981753,5634.37263778814,5528.575568193752),c(169.72420982465707,91.83895680616128,15.64421777833409,374.93414241185593,609.527567514129,634.4944670786848),c(59.95692194892777,82.2877052983205,30.814368351264115,714.0289917990491,1511.2943797268128,1043.7123969861102),c(117.14660134636657,38.93971768581238,58.78433347010385,204.0082833711569,602.8478133495905,582.825536534818),c(130.0603999199818,61.71577897374038,126.10187663748084,1637.5800043576648,1035.361895503452,766.766929270984),c(68.25864960339469,42.613275958058836,31.28843555666818,2301.985359661027,370.7263561318812,312.08034048495574),c(312.69840831825405,360.0087106801522,609.6504261496254,3683.176575457643,3503.5310593003906,3389.481843677665),c(244.43975871485938,189.55560684791686,215.7005784588488,807.7625274020131,1487.9152401509286,1630.6714479644374),c(273.03459841357875,232.90359446042498,173.98266438329125,2966.390714964389,2209.3286899210757,1719.5420084998884),c(182.6380083982723,84.49184026166837,137.95355677258243,799.4919213193987,669.6453549949746,868.0380331369629),c(95.93107511828444,274.78215876403453,193.8934870102619,1306.755761053086,1534.6735193026973,1746.4098523826992),c(58.112093581268454,33.796736104667346,9.007276902677203,35.839293024662695,113.55582079715279,183.94139273616597),c(271.18977004591943,127.83982787417649,321.891632469359,2117.275157149304,3772.391164423061,2236.231313938557),c(190.93973605273922,337.23264939222423,328.0545061396118,8094.16648618536,3022.5887594536257,2938.928769335146),c(61.80175031658709,74.20587709937831,146.0126992644515,427.31464760174754,197.0527478538828,212.87599384073138),c(11.991384389785555,40.40914099471096,151.70150572930027,807.7625274020131,1008.6428788452984,940.3745358983765),c(293.32771045783124,149.1464658532059,301.98080984238834,1819.533338175183,2067.3839139246347,1554.2014307595146),c(370.81050189952254,484.17498028208223,401.06085577183757,2867.143441973016,3533.5899530408133,2928.5949832263727),c(285.948396987194,338.7020727011228,238.45580431824385,2800.9785933121,2990.8599271720686,2364.3702616873466),c(80.25003399318025,53.63395077479819,4.26660484863657,151.62777818126526,250.49078117019,580.7587793130633),c(395.7156848629233,263.7614839472952,332.7951781936525,2122.7888945377135,2641.8427720749373,1781.5447251525288),c(140.206955942108,119.7579996752343,234.18919946960727,1009.0139420789651,1623.180261982831,1539.7341302072318),c(218.61216156762896,292.4152384708175,203.37483111834317,2712.7587950975458,3585.358047815986,2165.961568398898),c(99.62073185360306,147.67704254430734,238.45580431824385,2081.4358641246413,1846.9520264948676,1380.593824132122),c(52.57760847829051,58.042220701493925,0.0,22.054949553638583,165.3239155723254,239.74383772354216),c(230.6035459574145,90.3695334972627,422.39388001502044,1033.8257603268084,2479.858733584881,1833.2136556963956),c(344.06049056846246,402.621986638211,257.89255973981045,1780.9371764563155,2618.463632499053,2573.112741084569),c(195.5518069718875,74.9405887538276,94.3393738754086,540.3462640641453,888.4073038836071,946.5748075636405),c(276.7242551488974,211.59695648139558,90.07276902677204,551.3737388409646,1721.7066359097726,1029.2450964338275),c(41.50863827233461,65.38933724598682,55.93993023767948,777.4369717657601,936.8355215765106,582.825536534818),c(301.62943811229815,228.49532453372925,158.33844660495714,2114.518288455099,1710.0170661218303,2070.890736198183),c(106.07763114041067,126.37040456527791,335.1655142206728,2147.600712785557,1882.020735858694,2153.56102506837),c(201.08629207486544,215.27051475364203,147.90896808606777,460.3970719322054,532.7103946219373,824.6361314801148),c(206.6207771778434,247.5978275494108,210.48583919940413,1138.5867707065918,1360.999911024699,1853.8812279139422),c(166.9569672731681,51.42981581145031,54.991795826871346,512.777577122097,233.791395758844,797.768287597304),c(154.0431686995529,193.22916512016332,43.614182897173826,1524.548387895267,1997.2464951969816,1155.3172869608627),c(166.03455308933843,122.69684629303147,138.90169118339057,2508.7505117263886,2770.4280397423013,1481.864927998101),c(19.37069786042282,128.5745395286258,42.191981280961635,132.3296973218315,597.8379977261868,434.01901656848145),c(275.80184096506775,139.59521434536515,101.45038195646956,3407.489706037161,1599.8011224069467,1349.592465805802),c(147.58626941274528,40.40914099471096,49.77705656742665,827.0606082614469,460.90303735314956,467.08713211655623),c(167.87938145699775,99.92078500510347,283.0181216262258,1042.0963664094231,1173.9667944176238,1537.6673729854772),c(143.89661267742665,201.3109933191055,174.93079879409936,1331.5675793009295,1130.5483923481243,1089.181055864713),c(317.3104792374024,326.2119745754849,254.574089301982,3492.9526355575103,2526.6170127366495,2318.901602808744),c(224.14664667060688,63.919913937088246,179.67147084814,1576.9288930851587,896.7569965892802,737.8323281664185),c(156.81041125104187,99.18607335065418,63.05093831874042,463.15394062641025,576.128796691437,1085.0475414212037),c(63.6465786842464,134.4522327642201,224.23378815612196,314.2830311393498,1042.0416496679904,938.3077786766219),c(60.87933613275743,103.59434327734992,142.69422882662306,846.3586891208806,612.8674445963982,673.7628542920236),c(40.58622408850495,148.41175419875663,63.52500552414449,1524.548387895267,1798.5238088019642,913.5066920155658),c(101.46556022126238,130.04396283752436,170.19012674005873,678.1896987743864,1664.928725511196,1963.41936066694),c(114.37935879487759,210.127533172497,118.51680135101583,918.037275170206,1870.331166070752,1760.877152934982),c(125.4483290008335,268.16975387399094,170.66419394546278,2486.69556217275,2389.6820523636125,1351.6592230275567),c(84.86210491232853,65.38933724598682,239.403938729052,716.785860493254,996.9533090573561,1231.7873041657856),c(231.52596014124416,265.23090725619375,203.37483111834317,700.244648328025,1644.889463017581,1217.3200036135029),c(107.92245950806999,62.45049062818967,160.23471542657342,1971.1611163564482,1815.22319421331,1502.5325002156478),c(51.65519429446085,168.98368052333674,76.79888727545826,1025.555154244194,709.723879982205,963.1088653376779),c(71.02589215488366,67.59347220933469,185.36027731298876,1315.0263671357004,1160.607286088547,1192.5189169524467),c(133.7500566553004,146.94233088985806,204.79703273455536,736.0839413526877,1249.1140287686808,793.6347731537946),c(251.81907218549662,307.1094715598033,139.84982559419868,1678.933034770737,1618.1704463594274,1159.450801404372),c(117.14660134636657,196.16801173796048,232.76699785339508,1447.356064457532,1429.4673912112175,1519.0665579896852),c(189.0949076850799,229.23003618817853,195.3156886264741,3809.9925353910653,2145.871025357961,1926.2177306753558),c(306.24150903144647,145.47290758095946,201.47856229672692,1786.4509138447252,1978.877171244501,1775.3444534872647),c(153.12075451572323,560.5849923448085,155.96811057793684,5014.744154758573,2393.0219294458816,2238.298071160312),c(101.46556022126238,74.20587709937831,99.08004592944924,165.41212165228936,706.3840028999358,289.34601104565434),c(85.78451909615819,65.38933724598682,68.73974478358919,1108.2612150703387,890.0772424247417,1450.8635696717809),c(47.96553755914222,171.18781548668463,126.57594384288491,719.5427291874588,1220.7250735693926,1490.1319568851197),c(220.45698993528828,213.06637979029415,267.8479710532958,2916.7670784687025,2506.5777502430346,1723.675522943398),c(463.0519202824883,412.9079498005011,385.4166379935035,4223.522839521788,4153.13715180175,4356.724223458852),c(175.25869492763502,188.82089519346758,145.0645648536434,2310.2559657436414,2010.6060035260584,1696.8076790605871),c(215.84491901613998,174.86137375893108,229.92259462097073,1083.4493968224954,1449.5066537048328,1200.7859458394655),c(140.206955942108,191.75974181126475,137.47948956717838,1383.948084490821,1335.95083290768,969.309137002942),c(264.73287075911185,130.04396283752436,235.61140108581947,1116.5318211529532,1741.7458984033876,808.1020737060774),c(263.8104565752822,249.80196251275868,197.21195744809035,4813.4927400816205,1746.7557140267916,1680.2736212865498),c(175.25869492763502,113.88030643963998,213.80430963723256,1745.097883431653,2922.39244698555,1975.8199039974681),c(217.6897473837993,199.84157001020694,256.94442532900234,6150.57405677096,1770.134853602676,1942.7517884493932),c(87.62934746381751,94.77780342395843,181.56773966975626,576.185557088808,656.2858466658978,591.0925654218366),c(154.96558288338255,94.04309176950915,74.90261845384201,1160.6417202602304,492.63186963470696,493.95497599936704),c(118.99142971402588,57.30750904704463,59.258400675507914,419.0440415191331,611.1975060552636,303.81331159793706),c(59.03450776509811,97.7166500417556,197.21195744809035,507.2638397336874,774.8514830864543,1089.181055864713),c(191.86215023656888,306.37475990535404,301.98080984238834,2199.9812179754485,1539.6833349261012,2261.032400599613),c(131.9052282876411,36.00087106801522,63.05093831874042,314.2830311393498,273.8699207460744,748.1661142751918),c(137.43971339061903,212.33166813584486,216.64871286965695,1058.637578574652,1157.2674090062778,1519.0665579896852),c(183.56042258210195,54.36866242924748,105.24291959970206,645.1072744439285,1644.889463017581,1074.7137553124303),c(252.74148636932628,398.94842836596456,303.40301145860053,2147.600712785557,3580.348232192582,2994.731214322522),c(150.35351196423426,623.7701946274474,406.74966223668633,2362.636470933533,2840.5654584699546,2608.2476138543984),c(30.439668066378715,204.24983993690267,106.19105401051019,1339.838185383544,602.8478133495905,1167.7178302913906),c(119.91384389785554,307.8441832142526,406.27559503128225,2456.370006536497,2177.599857639518,2186.6291406164446),c(47.04312337531256,65.38933724598682,12.325747340505647,286.71434419730156,504.3214394226492,630.3609526351755),c(203.85353462635442,166.7795455599889,155.49404337253276,3073.9085940383775,1280.842861050238,1049.9126686513741),c(211.2328480969917,226.2911895703814,155.96811057793684,1281.9439428052426,1175.6367329587583,1525.266829654949),c(61.80175031658709,51.42981581145031,137.0054223617743,771.9232343773504,500.98156234038,566.2914787607806),c(111.61211624338861,33.796736104667346,85.80616417813546,314.2830311393498,639.5864612545518,429.8855021249721),c(155.8879970672122,65.38933724598682,160.70878263197747,272.93000072627746,1022.0023871743751,706.8309698400984),c(86.70693327998785,60.981067319291085,73.95448404303389,201.25141467695207,360.7067248850736,702.697455396589),c(107.92245950806999,130.77867449197365,142.69422882662306,424.55777890754274,1937.128707716136,1550.0679163160053),c(171.56903819231638,180.0043553400761,31.28843555666818,468.6676780148199,933.4956444942413,1246.2546047180683),c(132.82764247147077,44.817410921406704,54.991795826871346,576.185557088808,970.2342923992026,803.9685592625681),c(345.9053189361218,276.2515820729331,243.67054357768856,2784.437381146871,2249.4072149083063,2163.8948111771433),c(225.06906085443654,376.1723670780366,251.72968606955763,2900.2258663034736,2107.4624389118653,1698.8744362823418),c(296.0949530093202,600.2594216850702,355.07633684764346,4270.389607323271,3872.587476891137,4183.116616831459),c(87.62934746381751,201.3109933191055,133.68695192394586,758.1388909063263,961.8845996935296,1006.5107669945261),c(82.09486236083956,23.510772942377287,45.98451892419414,250.87505117263888,399.1153113311694,543.5571493214792),c(187.25007931742059,404.09140994710964,412.9125359069392,2335.067783991485,1856.9716577416752,2486.3089377708725),c(156.81041125104187,208.6581098635984,251.25561886415358,2106.2476823724846,1327.601140202007,1043.7123969861102),c(152.19834033189358,257.88379071170084,133.68695192394586,1689.9605095475563,1983.8869868679046,1285.522991931407),c(33.20691061786769,82.2877052983205,41.71791407555757,476.93828409743435,688.0146789474552,341.0149415895212),c(280.413911884216,433.4798761250812,291.0772641180949,2117.275157149304,2426.420700268574,2562.7789549757954),c(100.54314603743272,127.83982787417649,130.36848148611742,1116.5318211529532,1133.8882694303934,1506.666014659157),c(83.01727654466922,26.449619560174447,52.62145979985103,49.62363649568681,208.742317641825,219.07626550599542),c(99.62073185360306,146.20761923540874,139.37575838879462,3104.2341496746303,639.5864612545518,741.9658426099279),c(158.6552396187012,264.4961956017445,498.7187000850746,1444.599195763327,1958.8379087508856,2610.314371076153),c(112.53453042721827,133.71752110977081,142.220161621219,438.34212237856684,477.6024227644956,719.2315131706265),c(84.86210491232853,152.08531247100308,70.63601360520543,1557.6308122257249,930.1557674119722,764.7001720492293),c(136.51729920678937,79.34885868052334,51.19925818363884,805.0056587078083,1047.0514652913942,903.1729059067924),c(40.58622408850495,94.04309176950915,107.61325562672238,816.0331334846276,1212.3753808637196,613.826894861138),c(173.4138665599757,264.4961956017445,155.0199761671287,4107.734354365186,2362.963035705459,2616.514642741417),c(124.52591481700384,106.53318989514707,54.043661416063216,2260.6323292479547,980.2539236460102,531.1566059909511),c(107.92245950806999,107.26790154959637,51.19925818363884,159.89838426387973,377.40611029641957,653.0952820744769),c(81.1724481770099,202.7804166280041,258.84069415061856,220.54949553638582,2184.279611804057,524.9563343256871),c(237.0604452442221,120.4927113296836,177.77520202652374,1166.15545764864,1324.2612631197378,1550.0679163160053),c(17.5258694927635,23.510772942377287,27.96996511883974,13.784343471024114,312.2785071921702,454.6865887860282),c(229.68113177358484,308.57889486870187,196.2638230372822,2324.0403092146657,2217.6783826267488,2494.575966657891),c(39.6638099046753,16.898368052333673,38.39944363772913,132.3296973218315,328.9778926035162,322.4141265937291),c(111.61211624338861,124.90098125637934,116.62053252939958,920.7941438644108,2049.014589972154,1705.0747079476057),c(16.603455308933846,84.49184026166837,29.392166735051926,206.76515206536172,492.63186963470696,343.0816988112758),c(138.3621275744487,112.4108831307414,164.97538748061405,471.4245467090247,1057.0710965382018,983.7764375552247),c(14.758626941274528,24.24548459682658,0.0,74.43545474353022,280.5496749106128,574.5585076477993),c(85.78451909615819,154.28944743435093,72.05821522141763,482.452021485844,604.5177518907252,609.6933804176288),c(71.94830633871332,186.61676023011972,126.57594384288491,1025.555154244194,704.7140643588011,1027.1783392120728),c(84.86210491232853,97.7166500417556,88.65056741055984,512.777577122097,791.5508684978004,1159.450801404372),c(154.96558288338255,119.7579996752343,70.16194639980137,1303.9988923588812,1589.7814911601392,1392.99436746265),c(63.6465786842464,120.4927113296836,22.75522585939504,399.74596065969934,983.5938007282793,944.5080503418859),c(63.6465786842464,93.30838011505986,111.87986047535895,474.18141540322955,627.8968914666095,547.6906637649885),c(119.91384389785554,32.32731279576877,134.1610191293499,2798.2217246178952,936.8355215765106,872.1715475804723),c(90.39659001530649,147.67704254430734,45.03638451338602,1174.4260637312545,1043.711588209125,1147.050258073844),c(58.112093581268454,0.0,15.170150572930027,501.75010234527775,477.6024227644956,312.08034048495574),c(91.31900419913615,0.7347116544492902,27.96996511883974,683.703436162796,1065.4207892438747,452.6198315642735),c(62.72416450041675,92.57366846061056,135.5832207455621,920.7941438644108,1143.907900677201,1471.5311418893277),c(95.00866093445478,42.613275958058836,100.02818034025736,1954.6199041912193,798.2306226623388,828.7696459236241),c(49.81036592680153,96.24722673285702,256.94442532900234,104.76101037978327,1073.7704819495477,915.5734492373205),c(60.87933613275743,84.49184026166837,112.82799488616708,388.71848588288003,621.2171373020711,543.5571493214792),c(69.18106378722435,103.59434327734992,137.47948956717838,931.8216186412301,404.1251269545732,593.1593226435914),c(64.56899286807607,91.10424515171198,163.55318586440185,747.111416129507,975.2441080226064,822.5693742583601),c(193.70697860422817,138.86050269091584,98.60597872404517,1684.4467721591468,1127.2085152658549,1616.2041474121547),c(20.293112044252474,19.102503015681545,26.073696297223485,317.0398998335546,521.0208248339952,665.4958254050049),c(19.37069786042282,0.0,70.63601360520543,1039.3394977152182,657.9557852070324,624.1606809699115),c(82.09486236083956,82.2877052983205,68.73974478358919,405.25969804810893,846.6588403552422,1035.4453680990914),c(64.56899286807607,36.735582722464514,118.9908685564199,358.392930246627,422.49445090705376,524.9563343256871),c(52.57760847829051,102.12491996845134,70.63601360520543,782.9507091541697,485.95211547016856,684.096640400797),c(41.50863827233461,116.81915305743715,109.98359165374269,311.52616244514496,1761.785160897003,907.3064203503018),c(63.6465786842464,202.7804166280041,134.635086334754,667.1622239975671,1451.1765922459674,1113.9821425257692),c(72.87072052254298,22.041349633478706,10.429478518889393,204.0082833711569,470.9226685999572,500.155247664631),c(29.517253882549056,221.88291964368565,113.7761292969752,1190.9672758964834,1314.2416318729302,905.239663128547),c(36.89656735318632,68.32818386378399,37.925376432325066,5.513737388409646,91.846619762403,231.47680883652345),c(24.905182963400765,36.735582722464514,112.82799488616708,209.52202075956654,447.54352902407277,359.61575658531325),c(43.353466639993925,252.00609747610653,119.93900296722802,1477.681620093785,1529.6637036792936,1347.5257085840472),c(36.89656735318632,17.633079706782965,13.273881751313773,341.851718081398,330.6478311446508,124.00543330528042),c(32.28449643403803,16.898368052333673,19.91082262697066,16.541212165228938,0.0,16.53405777403739),c(60.87933613275743,229.23003618817853,95.28750828621673,2368.150208321943,1526.3238265970244,1192.5189169524467),c(26.750011331060083,35.26615941356593,54.517728621467285,438.34212237856684,293.9091832396896,403.01765824216136),c(27.67242551488974,128.5745395286258,123.25747340505646,496.2363649568681,360.7067248850736,353.4154849200492),c(11.991384389785555,15.428944743435094,68.73974478358919,195.73767728854241,455.8932217297458,214.94275106248605),c(13.83621275744487,83.02241695276979,185.36027731298876,250.87505117263888,1345.9704641544874,591.0925654218366),c(34.129324801697344,85.96126357056696,32.236569967476306,46.86676780148199,364.0466019673428,192.20842162318465),c(54.422436845949825,38.93971768581238,18.014553805354407,113.03161646239774,556.0895341978218,188.0749071796753),c(25.827597147230424,27.919042869073028,7.11100808106095,27.568686942048227,485.95211547016856,310.01358326320104),c(6.456899286807606,25.714907905725156,37.451309226921005,24.811818247843405,172.0036697368638,322.4141265937291),c(33.20691061786769,30.1231778324209,7.585075286465013,975.9315177485073,337.3275853091892,179.80787829265662),c(21.215526228082133,33.06202445021806,11.37761292969752,181.9533338175183,110.2159437148836,210.8092366189767),c(5.534485102977948,0.0,0.0,159.89838426387973,0.0,93.00407497896032),c(16.603455308933846,106.53318989514707,182.51587408056437,350.1223241640125,746.4625278871662,663.4290681832503),c(8.301727654466923,19.102503015681545,77.74702168626638,192.9808085943376,749.8024049694354,460.88686045129225),c(3.689656735318632,7.347116544492902,27.021830708031608,0.0,115.22575933828739,16.53405777403739),c(10.146556022126237,50.695104157001026,64.47313993495261,482.452021485844,1284.1827381325074,812.2355881495868),c(3.689656735318632,44.08269926695741,5.68880646484876,479.69515279163915,394.1054957077656,281.0789821586356),c(6.456899286807606,7.347116544492902,19.436755421566595,468.6676780148199,178.6834239014022,487.754704334103),c(2.767242551488974,20.571926324580126,0.0,27.568686942048227,138.6048989141718,235.6103232800328),c(2.767242551488974,10.285963162290063,10.429478518889393,35.839293024662695,151.9644072432486,169.47409218388324),c(0.922414183829658,24.980196251275867,18.962688216162533,154.38464687547008,141.944775996441,434.01901656848145),c(0.0,47.02154588475457,13.747948956717837,234.33383900740995,175.343546819133,93.00407497896032),c(0.0,19.102503015681545,0.47406720540406333,49.62363649568681,1.6699385411346,78.5367744266776),c(0.0,46.28683423030528,8.53320969727314,361.1497989408318,387.42574154322716,316.2138549284651),c(0.0,0.0,7.585075286465013,2.756868694204823,250.49078117019,45.468658878602824),c(0.0,0.0,0.0,93.73353560296398,63.4576645631148,117.8051616400164),c(0.0,0.0,0.0,0.0,0.0,0.0),c(0.0,0.0,0.0,0.0,0.0,0.0),c(0.0,0.0,0.0,0.0,0.0,0.0))
targetgene="Nontargeting"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(106.07763114041067,324.007839612137,145.0645648536434,31924.53947889185,7746.844892323409,8178.158326483243),c(91.31900419913615,95.51251507840773,116.14646532399551,20690.299550007196,3775.7310415053303,5144.158724947383),c(145.74144104508596,158.69771736104667,100.50224754566142,7903.942546285227,8162.659589065925,7186.114860041001),c(119.91384389785554,316.6607230676441,127.9981454590971,21244.430157542363,6040.167703283848,7791.67472601512),c(90.39659001530649,142.5340609631623,94.3393738754086,9814.45255136917,4585.651233955611,6708.693941815671),c(54.422436845949825,159.43242901549598,45.03638451338602,5930.024561234574,5537.516202402333,4104.579842404782))
targetgene="YALI1_C00167g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(142.05178430976733,163.10598728774244,97.18377710783298,9665.581641882109,7437.906262213508,4925.082459441387),c(44.275880823823584,49.22568084810244,44.56231730798196,3208.9951600544136,2272.7863544841907,2190.762655059954),c(421.5432820101537,772.9166604806533,557.9771007605825,28133.845024360216,18011.957104677796,15864.428434188876),c(190.93973605273922,137.39107938201727,221.38938492369758,9651.797298411086,6726.512443690169,6898.835606217101),c(39.6638099046753,100.65549665955275,62.1028039079323,3862.373040580957,2513.257504407573,2843.857937134431),c(94.08624675062512,100.65549665955275,77.74702168626638,9017.717498743976,6941.934515496532,5075.955736629478))
targetgene="YALI1_C00209g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(202.0087062586951,298.2929317064118,180.61960525894813,15126.938525101863,11948.410261818062,9482.282133410443),c(214.00009064848066,294.61937343416537,322.36569967476305,15154.50721204391,6242.230266761135,11212.157928019105),c(275.80184096506775,135.18694441866938,390.1573100475441,24304.554408109718,9864.326962482082,11464.302309073175),c(81.1724481770099,241.7201343138165,255.9962909181942,18297.33752343741,7165.706280008569,6710.760699037425),c(16.603455308933846,102.85963162290062,74.90261845384201,22101.816321440063,2706.9703751791867,1816.6795979223582),c(17.5258694927635,0.0,0.0,162.65525295808456,110.2159437148836,1180.1183736219186))
targetgene="YALI1_C00177g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(275.80184096506775,349.72274751786216,365.03174816112875,7198.184160568792,5402.251180570431,3868.9695191247492),c(241.6725161633704,260.0879256750487,340.85432068552154,18374.529846875143,11328.863063057126,10736.80376701553),c(76.56037725786162,291.68052681636823,293.4476001451152,6798.438199909093,4221.604631988269,4338.1234084630605),c(66.41382123573538,46.28683423030528,83.90989535651921,10131.492451202725,4062.960470580482,3426.683473669249),c(235.2156168765628,114.61501809408927,146.48676646985558,9886.131137418495,7508.043680941161,8529.507054181538),c(130.0603999199818,155.02415908880025,98.60597872404517,7901.185677591022,6190.462171985962,5631.913429281486))
targetgene="YALI1_C00164g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(164.1897247216791,80.08357033497263,94.3393738754086,8628.999012861095,2386.3421752813433,3662.293796949282),c(223.22423248677723,177.80022037672822,260.73696297223483,6930.767897230925,4293.411989257056,4776.275939475051),c(148.50868359657494,55.103374083696764,181.09367246435218,4132.54617261303,1499.6048099388709,1820.8131123658675),c(497.18124508418566,537.8089310568804,307.6696163072371,10506.42659361458,7127.297693562473,9889.433306096114),c(307.1639232152761,210.127533172497,365.9798825719369,11212.184979331014,6754.901398889457,7740.005795471253),c(177.10352329529434,348.98803586341285,73.95448404303389,21291.296925343846,3760.701594635119,3519.6875486482095))
targetgene="YALI1_C00258g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(174.33628074380536,198.37214670130837,139.37575838879462,3126.289099228269,4607.360434990362,3372.9477859036274),c(316.3880650535727,329.8855328477313,360.29107610708814,10247.280936359326,4121.408319520193,5547.176383189544),c(255.50872892081526,141.06463765426372,221.86345212910163,1135.829902012387,502.6515008815146,1124.3159286345424),c(128.21557155232247,193.22916512016332,122.7834061996524,3815.506272779475,2145.871025357961,2730.186289937924),c(221.3794041191179,232.90359446042498,206.6933015561716,5797.694863912742,5383.88185661795,5030.487077750876),c(169.72420982465707,282.12927530852744,262.6332317938511,5954.836379482417,4096.359241403174,4968.484361098235))
targetgene="YALI1_C00141g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(473.19847630461453,455.5212257585599,311.4621539504696,5017.501023452777,2610.11393979338,3949.5730507731814),c(364.3536026127149,265.96561891064306,153.5977745509165,4504.72344633068,2394.6918679870164,3273.743439259403),c(208.4656055455027,224.8217662614828,277.80338236678114,2933.3082906339314,2431.4305158919774,2351.9697183568187),c(193.70697860422817,147.67704254430734,208.1155031723838,6288.417491481201,1354.3201568601605,1765.0106673784912),c(94.08624675062512,79.34885868052334,180.14553805354407,2864.386573278811,1035.361895503452,1426.062483010725),c(104.23280277275136,168.24896886888746,547.5476222416931,6958.336584172973,1957.167970209751,2630.9819432936997))
targetgene="YALI1_C00331g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%


<<fig=TRUE,echo=FALSE,width=4.5,height=4.5>>=
par(mfrow=c(2,2));

# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(1198.2160247947259,785.4067586062912,530.0071356417428,15595.606203116682,7548.122205928392,6971.172108978514),c(246.2845870825187,391.60131182147165,173.0345299724831,3338.5679886820403,4689.187423505957,1961.3526034451854),c(179.8707658467833,77.87943537162477,63.05093831874042,1133.0730333181823,507.6613165049184,996.1769808857528),c(224.14664667060688,115.34972974853856,148.38303529147183,782.9507091541697,1663.2587869700615,1461.1973557805543),c(63.6465786842464,95.51251507840773,173.98266438329125,1009.0139420789651,1512.9643182679476,1428.1292402324796),c(688.1209811369249,408.49967987380535,614.8651654090702,2514.2642491147985,5121.701505659818,3713.9627274931486))
targetgene="YALI1_A00014g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



# parameters
# Do not modify the variables beginning with "__"
targetmat=list(c(1182.5349836696216,54.36866242924748,91.49497064298423,1353.622528854568,1249.1140287686808,1248.321361939823),c(159.57765380253085,168.98368052333674,215.22651125344476,10875.846998638026,2247.7372763671715,2664.0500588417744),c(359.7415316935666,188.0861835390183,242.72240916688042,1860.8863685882554,1748.4256525679261,1942.7517884493932),c(331.14669199484723,195.4333000835112,209.06363758319193,4871.386982659922,2760.408408495494,3333.6793986902885),c(201.08629207486544,181.47377864897467,195.78975583187815,4507.480315024885,3428.3838249493338,4519.998043977472),c(128.21557155232247,105.79847824069779,221.38938492369758,2329.554046603075,1705.0072504984266,2362.303504465592))
targetgene="YALI1_C00353g"
collabel=c("PO1f_1","PO1f_2","PO1f_3","PO1f_Cas9_ku70_1","PO1f_Cas9_ku70_2","PO1f_Cas9_ku70_3")

# set up color using RColorBrewer
#library(RColorBrewer)
#colors <- brewer.pal(length(targetgenelist), "Set1")

colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
          "#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", 
          "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
          "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")


## code

targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:length(targetmat)){
  vali=targetmat[[i]]+1;
  if(i==1){
    plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
    axis(1,at=1:length(vali),labels=(collabel),las=2)
    # lines(0:100,rep(1,101),col='black');
  }else{
    lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
  }
}



par(mfrow=c(1,1));
@
%__INDIVIDUAL_PAGE__









\end{document}

